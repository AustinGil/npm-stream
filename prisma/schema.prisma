// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// generator erd {
//   provider = "prisma-erd-generator"
// }

// generator zod {
//   provider                 = "zod-prisma"
//   output                   = "./zod"

//   // relationModel            = true // (default) Create and export both plain and related models.
//   // relationModel         = "default" // Do not export model without relations.
//   // relationModel         = false // Do not generate related model

//   // modelCase                = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
//   // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

//   // modelSuffix              = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

//   // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
//   // useDecimalJs             = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

//   // imports                  = null // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable

//   // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
//   // prismaJsonNullability    = true // (default) uses prisma's scheme for JSON field nullability
//   // prismaJsonNullability = false // allows null assignment to optional JSON fields
// }

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id     String     @id 
  email  String     @unique
  password String
}

model Upload {
  id     String     @id 
  name   String
  url    String
  size   Int
  type   String
  person Person?
  pet    Pet?
}

model Person {
  id      String      @id
  name    String
  pet     PersonOnPet[]
  imageId String?
  image   Upload?     @relation(fields: [imageId], references: [id])
}

model Pet {
  id      String      @id
  name    String
  type    String
  birthday DateTime   @default(now())
  owner   PersonOnPet[]
  imageId String?
  image   Upload?     @relation(fields: [imageId], references: [id])
}

model PersonOnPet {
  owner       Person     @relation(fields: [personId], references: [id])
  personId    String // relation scalar field (used in the `@relation` attribute above)
  pet         Pet @relation(fields: [petId], references: [id])
  petId       String // relation scalar field (used in the `@relation` attribute above)

  @@id([personId, petId])
}
